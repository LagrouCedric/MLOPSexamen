# create a dockerfile for the flash frontend to use main.py and templates folder
# FROM python:3.7
# # copy the requirements.txt file to the docker image
# COPY frontend/requirements.dev.txt /app/requirements.dev.txt

# COPY frontend/main/main.py /app/main.py
# COPY frontend/main/templates /app/templates
# #run requirements.txt
# RUN pip install -r /app/requirements.dev.txt
# #set the working directory
# WORKDIR /app

# EXPOSE 5000
# CMD ["poetry", "run", "uvicorn", "--reload", "--host=0.0.0.0", "--port=8000", "/frontend/main/main:app"]

# FROM python:3.10-slim-bullseye as python-base

# # https://python-poetry.org/docs#ci-recommendations
# ENV POETRY_VERSION=1.2.0
# ENV POETRY_HOME=/opt/poetry
# ENV POETRY_VENV=/opt/poetry-venv

# # Tell Poetry where to place its cache and virtual environment
# ENV POETRY_CACHE_DIR=/opt/.cache

# # Create stage for Poetry installation
# FROM python-base as poetry-base

# # Creating a virtual environment just for poetry and install it with pip
# RUN python3 -m venv $POETRY_VENV \
#     && $POETRY_VENV/bin/pip install -U pip setuptools \
#     && $POETRY_VENV/bin/pip install poetry==${POETRY_VERSION}

# # Create a new stage from the base python image
# FROM python-base as example-app

# # Copy Poetry to app image
# COPY --from=poetry-base ${POETRY_VENV} ${POETRY_VENV}

# # Add Poetry to PATH
# ENV PATH="${PATH}:${POETRY_VENV}/bin"

# WORKDIR /app

# # Copy Dependencies
# COPY poetry.lock* pyproject.toml ./

# # [OPTIONAL] Validate the project is properly configured
# RUN poetry check

# # Install Dependencies
# RUN poetry install --no-interaction --no-cache --without dev

# # Copy Application
# COPY . /app

# # Run Application
# CMD ["poetry", "run", "uvicorn", "--reload", "--host=0.0.0.0", "--port=8000", "main:app"]



FROM tiangolo/uvicorn-gunicorn-fastapi:python3.9-alpine3.14 as build-image

# python
ENV PYTHONUNBUFFERED=1 \
    # prevents python creating .pyc files
    PYTHONDONTWRITEBYTECODE=1 \
    # pip
    PIP_NO_CACHE_DIR=off \
    PIP_DISABLE_PIP_VERSION_CHECK=on \
    PIP_DEFAULT_TIMEOUT=100 \
    # poetry
    # https://python-poetry.org/docs/configuration/#using-environment-variables
    POETRY_VERSION=1.1.13 \
    # make poetry install to this location
    POETRY_HOME="/opt/poetry" \
    # make poetry create the virtual environment in the project's root
    # it gets named `.venv`
    POETRY_VIRTUALENVS_IN_PROJECT=true \
    # do not ask any interactive question
    POETRY_NO_INTERACTION=1 \
    # paths
    # this is where our requirements + virtual environment will live
    PYSETUP_PATH="/opt/pysetup" \
    VENV_PATH="/opt/pysetup/.venv"

# prepend poetry and venv to path
ENV PATH="$POETRY_HOME/bin:$VENV_PATH/bin:$PATH"

WORKDIR '/app'

RUN apk add --no-cache g++ curl libffi-dev

# Install Poetry
RUN curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python

# Copy poetry.lock* in case it doesn't exist in the repo
COPY ./pyproject.toml ./poetry.lock* /app/

RUN poetry export --without-hashes -f requirements.txt > requirements.txt \
        && pip wheel --wheel-dir=/root/wheels -r requirements.txt



FROM tiangolo/uvicorn-gunicorn-fastapi:python3.9-alpine3.14 as production-image

ENV PYTHONUNBUFFERED=1 \
    # prevents python creating .pyc files
    PYTHONDONTWRITEBYTECODE=1 \
    # pip
    PIP_NO_CACHE_DIR=off \
    PIP_DISABLE_PIP_VERSION_CHECK=on \
    PIP_DEFAULT_TIMEOUT=100

WORKDIR '/app'

COPY --from=build-image /root/wheels /root/wheels

COPY --from=build-image /app/requirements.txt ./

RUN pip install --no-index --find-links=/root/wheels -r requirements.txt

COPY ./frontend ./

CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "5050"]