# create a dockerfile for the flash frontend to use main.py and templates folder
# FROM python:3.7
# # copy the requirements.txt file to the docker image
# COPY frontend/requirements.dev.txt /app/requirements.dev.txt

# COPY frontend/main/main.py /app/main.py
# COPY frontend/main/templates /app/templates
# #run requirements.txt
# RUN pip install -r /app/requirements.dev.txt
# #set the working directory
# WORKDIR /app

# EXPOSE 5000
# CMD ["poetry", "run", "uvicorn", "--reload", "--host=0.0.0.0", "--port=8000", "/frontend/main/main:app"]

FROM python:3.10-slim-bullseye as python-base

# https://python-poetry.org/docs#ci-recommendations
ENV POETRY_VERSION=1.2.0
ENV POETRY_HOME=/opt/poetry
ENV POETRY_VENV=/opt/poetry-venv

# Tell Poetry where to place its cache and virtual environment
ENV POETRY_CACHE_DIR=/opt/.cache

# Create stage for Poetry installation
FROM python-base as poetry-base

# Creating a virtual environment just for poetry and install it with pip
RUN python3 -m venv $POETRY_VENV \
    && $POETRY_VENV/bin/pip install -U pip setuptools \
    && $POETRY_VENV/bin/pip install poetry==${POETRY_VERSION}

# Create a new stage from the base python image
FROM python-base as example-app

# Copy Poetry to app image
COPY --from=poetry-base ${POETRY_VENV} ${POETRY_VENV}

# Add Poetry to PATH
ENV PATH="${PATH}:${POETRY_VENV}/bin"

WORKDIR /app

# Copy Dependencies
COPY poetry.lock* pyproject.toml ./

# [OPTIONAL] Validate the project is properly configured
RUN poetry check

# Install Dependencies
RUN poetry install --no-interaction --no-cache --without dev

# Copy Application
COPY . /app

# Run Application
CMD ["poetry", "run", "uvicorn", "--reload", "--host=0.0.0.0", "--port=8000", "main:app"]
